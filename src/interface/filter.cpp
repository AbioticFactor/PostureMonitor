#include "filter.h"
#include "ui_Filter.h" // This file would be generated by the uic tool from your filter.ui XML

Filter::Filter(QWidget *parent) : 
    QWidget(parent), 
    ui(new Ui::Filter) {
    ui->setupUi(this); // Set up the UI elements based on the XML

    // Connect the signals from the checkboxes and buttons to their respective slots
    connect(ui->pushButton, &QPushButton::clicked, this, &Filter::on_rarityButton_clicked);
    connect(ui->pushButton_2, &QPushButton::clicked, this, &Filter::on_typesButton_clicked);
    connect(ui->pushButton_3, &QPushButton::clicked, this, &Filter::on_okButton_clicked);
}

Filter::~Filter() {
    delete ui; // Clean up the ui instance
}

void Filter::on_okButton_clicked() {
    QList<int> manaCosts;
    QList<QString> colors;
    gatherManaCosts(manaCosts);
    gatherColors(colors);
    // Emit the signal with the gathered filter data
    emit filtersUpdated(manaCosts, colors);
}

void Filter::on_rarityButton_clicked() {
    emit navigateToRarityScreen();
}

void Filter::on_typesButton_clicked() {
    emit navigateToTypeScreen();
}

void Filter::gatherManaCosts(QList<int>& manaCosts) {
    // Iterate over manaCostCheckBoxes and gather selected costs
    for (QCheckBox* checkBox : {ui->checkBox, ui->checkBox_2, ui->checkBox_3, ui->checkBox_4, ui->checkBox_5, ui->checkBox_6, ui->checkBox_7}) {
        if (checkBox->isChecked()) {
            manaCosts.append(checkBox->text().toInt());
        }
    }
}

void Filter::gatherColors(QList<QString>& colors) {
    // Iterate over colorCheckBoxes and gather selected colors
    for (QCheckBox* checkBox : {ui->checkBox_8, ui->checkBox_9, ui->checkBox_10, ui->checkBox_11, ui->checkBox_12, ui->checkBox_13, ui->checkBox_14}) {
        if (checkBox->isChecked()) {
            colors.append(checkBox->text());
        }
    }
}


// In the future need multi color card support better (by text, flipped cards, etc)
